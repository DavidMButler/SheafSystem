
//
// Copyright (c) 2014 Limit Point Systems, Inc. 
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#ifndef COM_LIMITPOINT_SHEAF_SINGLY_LINKED_LIST_H
#define COM_LIMITPOINT_SHEAF_SINGLY_LINKED_LIST_H

#cmakedefine HAVE_FORWARD_LIST 1

#ifndef COM_LIMITPOINT_SHEAF_SHEAF_DLL_SPEC_H
#include "ComLimitPoint/sheaf/sheaf_dll_spec.h"
#endif

// Include the appropriate header file.

#ifdef HAVE_FORWARD_LIST
#include <forward_list>
namespace list_ns = std;
#else
#include <ext/slist>
namespace list_ns = __gnu_cxx;
#endif

namespace sheaf
{

// Forward declarations to enable friend declaration.

template< class T, class Alloc > class singly_linked_list;

template< class T, class Alloc >
bool operator==(const singly_linked_list<T,Alloc>& lhs,
                const singly_linked_list<T,Alloc>& rhs);

template< class T, class Alloc >
bool operator<( const singly_linked_list<T,Alloc>& lhs,
                const singly_linked_list<T,Alloc>& rhs);

///
/// Wrapper class for forward_list or slist depending on compiler.
/// The class replicates the minimum subset of the forward_list and
/// slist classes.  It also implements a push_front function that
/// takes a range.
///
/// @hack This wrapper is a temporary fix until gcc-4.2.2 is no longer
///       supported.
///
template <typename T, class A = list_ns::allocator<T> >
class SHEAF_DLL_SPEC singly_linked_list
{

  friend bool operator==<T, A>(const singly_linked_list<T,A>& lhs,
                               const singly_linked_list<T,A>& rhs);
  friend bool operator< <T, A>(const singly_linked_list<T,A>& lhs,
                               const singly_linked_list<T,A>& rhs);

public:

#ifdef HAVE_FORWARD_LIST
  typedef typename list_ns::forward_list<T, A>::value_type value_type;
  typedef typename list_ns::forward_list<T, A>::size_type size_type;
  typedef typename list_ns::forward_list<T, A>::difference_type difference_type;
  typedef typename list_ns::forward_list<T, A>::reference reference;
  typedef typename list_ns::forward_list<T, A>::const_reference const_reference;
  typedef typename list_ns::forward_list<T, A>::pointer pointer;
  typedef typename list_ns::forward_list<T, A>::iterator iterator;
  typedef typename list_ns::forward_list<T, A>::const_iterator const_iterator;
#else
  typedef typename list_ns::slist<T, A>::value_type value_type;
  typedef typename list_ns::slist<T, A>::size_type size_type;
  typedef typename list_ns::slist<T, A>::difference_type difference_type;
  typedef typename list_ns::slist<T, A>::reference reference;
  typedef typename list_ns::slist<T, A>::const_reference const_reference;
  typedef typename list_ns::slist<T, A>::pointer pointer;
  typedef typename list_ns::slist<T, A>::iterator iterator;
  typedef typename list_ns::slist<T, A>::const_iterator const_iterator;
#endif

  ///
  /// Default Constructor.
  ///
  singly_linked_list()
  {
  };

  ///
  /// Constructs the container with count value-initialized
  /// (default constructed, for classes) instances of T.
  /// No copies are made. 
  ///
  singly_linked_list(size_type count)
    : _list(count)
  {
  };

  ///
  /// Constructs the container with count copies of elements with value value.
  ///
  singly_linked_list(size_type count, const T& value)
    : _list(count, value)
  {
  };

  ///
  /// Copy Constructor
  ///
  singly_linked_list(const singly_linked_list& other)
    : _list(other._list)
  {
  };

  ///
  /// Destructor
  ///
  ~singly_linked_list()
  {
  };

  ///
  /// Copy assignment operator. Replaces the contents with a
  /// copy of the contents of other.
  ///
  singly_linked_list& operator=(const singly_linked_list& other)
  {
    _list = other._list;

	return *this;
  };

  ///
  /// Move assignment operator. Replaces the contents with those of other
  /// using move semantics (i.e. the data in other is moved from other
  /// into this container). other is in a valid but unspecified state
  /// afterwards. 
  ///
  singly_linked_list& operator=(singly_linked_list& other)
  {
    _list = other._list;

	return *this;
  };

  ///
  /// Echanges the contents of the container with those of other. Does not
  /// invoke any move, copy, or swap operations on individual elements. 
  ///
  void swap(singly_linked_list& other)
  {
    _list.swap(other._list);
  };

  ///
  /// Returns a reference to the first element in the container. 
  ///
  reference front()
  {
    return _list.front();
  };

  ///
  /// Returns a reference to the first element in the container. 
  ///
  const_reference front() const
  {
    return _list.front();
  };

  ///
  /// Returns an iterator to the first element of the container. 
  ///
  iterator begin()
  {
    return _list.begin();
  };

  ///
  /// Returns an iterator to the first element of the container. 
  ///
  const_iterator begin() const
  {
    return _list.begin();
  };
  
  ///
  /// Returns an iterator to the element following the last element
  /// of the container. 
  ///
  iterator end()
  {
    return _list.end();
  };

  ///
  /// Returns an iterator to the element following the last element
  /// of the container. 
  ///
  const_iterator end() const
  {
    return _list.end();
  };

  ///
  /// Checks if the container has no elements, i.e. whether begin() == end(). 
  ///
  bool empty() const
  {
    return _list.empty();
  };

  ///
  /// Returns the maximum number of elements the container is able to hold
  /// due to system or library implementation limitations
  ///
  size_type max_size() const
  {
    return _list.max_size();
  };

  ///
  /// Removes all elements from the container. 
  ///
  void clear()
  {
    _list.clear();
  };

#ifdef HAVE_FORWARD_LIST

  //
  // Forward_list signatures for insert_after on Windows.  Use the Windows
  // signature because two of the insert_after after signatures have a
  // void return time.  The standard states that all insert_after signatures
  // should return an iterator but we need this code to compile on Windows.
  //

  ///
  /// Inserts value after the element pointed to by pos.
  ///
  iterator insert_after(const_iterator pos, const T& value)
  {
    return _list.insert_after(pos, value);
  };

  ///
  /// Inserts value after the element pointed to by pos.
  ///
  iterator insert_after(const_iterator pos, T&& value)
  {
    return _list.insert_after(pos, value);
  };

  ///
  /// Inserts count copies of the value after the element pointed to by pos.
  ///
  void insert_after(const_iterator pos, size_type count, const T& value)
  {
    _list.insert_after(pos, count, value);
  };

  ///
  /// inserts elements from range [first, last) after the element pointed
  /// to by pos.
  ///
  template<class InputIt>
  void insert_after(const_iterator pos, InputIt first, InputIt last)
  {
    _list.insert_after(pos, first, last);
  };

  //
  // Forward_list standard and Windows signatures for erase_after.
  //

  ///
  /// Removes the element following pos.
  ///
  iterator erase_after(const_iterator position)
  {
    return _list.erase_after(position);
  };

#else // HAVE_FORWARD_LIST

  //
  // Slist signatures for insert_after and erase_after.
  //

  ///
  /// Inserts value after the element pointed to by pos.
  ///
  iterator insert_after(iterator pos, const T& value)
  {
    return _list.insert_after(pos, value);
  };

  ///
  /// Inserts value after the element pointed to by pos.
  ///
  iterator insert_after(iterator pos, T& value)
  {
    return _list.insert_after(pos, value);
  };

  ///
  /// Inserts count copies of the value after the element pointed to by pos.
  ///
  void insert_after(iterator pos, size_type count, const T& value)
  {
    _list.insert_after(pos, count, value);
  };

  ///
  /// inserts elements from range [first, last) after the element pointed
  /// to by pos.
  ///
  template<class InputIt>
  void insert_after(iterator pos, InputIt first, InputIt last)
  {
    _list.insert_after(pos, first, last);
  };

  ///
  /// Removes the element following pos.
  ///
  iterator erase_after(iterator position)
  {
    return _list.erase_after(position);
  };

#endif // HAVE_FORWARD_LIST

  ///
  /// Prepends the given element value to the beginning of the container. 
  ///
  void push_front(const T& value)
  {
    _list.push_front(value);
  };

  ///
  /// Prepends the given element value to the beginning of the container. 
  ///
  void push_front(T& value)
  {
    _list.push_front(value);
  };

  ///
  /// Prepends the range [first, last) to the beginning of the containter.
  ///
  template<class InputIt>
  void push_front(InputIt first, InputIt last)
  {
#ifdef HAVE_FORWARD_LIST
    _list.insert_after(_list.before_begin(), first, last);
#else
    _list.insert(_list.begin(), first, last);
#endif
  };

  ///
  /// Removes the first element of the container. 
  ///
  void pop_front()
  {
    _list.pop_front();
  };

  ///
  /// Resizes the container to contain count elements.
  /// Additional value-initialized elements are appended.
  ///
  void resize(size_type count)
  {
    _list.resize(count);
  };

  ///
  /// Resizes the container to contain count elements. 
  /// Additional copies of value are appended.
  ///
  void resize(size_type count, const value_type& value)
  {
    _list.resize(count, value);
  };

  ///
  /// Merges two sorted lists into one. The lists should
  /// be sorted into ascending order. 
  ///
  void merge(singly_linked_list& other)
  {
    _list.merge(other._list);
  };


  ///
  /// Removes all elements with value.
  ///
  void remove(const T& value)
  {
     _list.remove(value);
  };

  ///
  /// Reverses the order of the elements in the container.
  ///
  void reverse()
  {
    _list.reverse();
  };

  ///
  /// Removes all consecutive duplicate elements from the container.
  ///
  void unique()
  {
    _list.unique();
  };

  ///
  /// Sorts the elements in ascending order.
  ///
  void sort()
  {
    _list.sort();
  };

private:

#ifdef HAVE_FORWARD_LIST
  list_ns::forward_list<T, A> _list;
#else
  list_ns::slist<T, A> _list;
#endif

};

///
/// Checks if the contents of lhs and rhs are equal, that is, whether
/// lhs.size() == rhs.size() and each element in lhs compares equal with
/// the element in rhs at the same position.
///
template< class T, class Alloc >
bool operator==(const singly_linked_list<T,Alloc>& lhs,
                const singly_linked_list<T,Alloc>& rhs)
{
  return (lhs._list == rhs._list);
};

template< class T, class Alloc >
bool operator<( const singly_linked_list<T,Alloc>& lhs,
                const singly_linked_list<T,Alloc>& rhs)
{
  return (lhs._list < rhs._list);
};

} // namespace sheaf

#endif // SINGLY_LINKED_LIST_H
