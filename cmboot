#!/bin/bash

#
# Copyright (c) 2013 Limit Point Systems, Inc. 

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A convenience script to abstract away some of the complexity of running cmake.
#
# NOTE: The assumption is that this script is executed from the top of the SheafSystem source tree.

# User can provide command line args to cmake
user_args=$@

# Set preferred build directory.
# You may change this to any location that suits.
builddir=build

# The directory cmboot is run from; ostensibly the top of the source tree.
sourcedir=$PWD

# No command line args. Print usage info
while [ ! -z "$1" ]
do
  case "$1" in
    help | -help | --help)
		echo  ""
    	echo  "Usage: $0 [-D<cmake variable/value>]"
    	echo  "   Automates configure phase of cmake run. Arg(s) can be any legitimate"
    	echo  "   CMake variable/value pair. See $builddir/CMakeCache.txt for a list of "
    	echo  "   variables that cmake understands."
    	echo  ""    	
    	echo  "   Note: Debug-contracts is the default build type, and is "
    	echo  "   therefore the build type when cmboot is executed without arguments."
    	echo  ""
    	echo  "   Example: $0"
        echo  "    -- Default: Build type is Debug-contracts, end user documentation, bindings targets disabled." 
    	echo  ""
        echo  "   Example: $0 -DCMAKE_BUILD_TYPE=Debug-no-contracts -DDOC_STATE=dev"
        echo  "    -- Build type is Debug-no-contracts, developer documentation." 
        echo  ""
        echo  "   Example: $0 -DCMAKE_BUILD_TYPE=Release-contracts -DDOC_STATE=dev -DBUILD_BINDINGS=ON"
        echo  "    -- Build type is Release-contracts, developer documentation, bindings targets enabled." 
    	echo  "" 
        echo  "   Example: $0 -DCMAKE_BUILD_TYPE=Debug-no-contracts -DDOC_STATE=user -DBUILD_BINDINGS=ON -DCMAKE_INSTALL_PREFIX=/tmp/test"
        echo  "    -- Build type is Debug-no-contracts, end user documentation, bindings targets enabled, install location set to /tmp/test." 
    	echo  "" 
    	echo  "";;
     "") break;;
    -D*) break;;
      *)  echo "I don't understand "$1"; try 'help' instead.";;
  esac
  exit 0
done

# Create the build directory
if ! test -d $builddir; then
   mkdir $builddir
fi

# Go there
cd $builddir;

# Execute CMake; redirect errors to file
if cmake $user_args $sourcedir 2> cmake.error; then
	echo ""
	echo "CMake configure complete. Now cd to $builddir and source the set_env_vars script"
	echo "appropriate for your shell before executing make."
	echo""
	echo "Example:"
	echo""
	echo "	cd build"
	echo "	source set_env_vars.csh"
	echo "	make -j6 lib"
	echo""
	echo "Do a 'make help' in $builddir for more info on the Cmake build system."
	echo""
# Cat the file to stdout. This really cleans up the cmake error trace.	
else
	echo ""
	echo ""
	cat cmake.error
	echo ""
	echo ""
fi
