
//
// Copyright (c) 2013 Limit Point Systems, Inc. 
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#ifndef STD_UNORDERED_SET_H
#define STD_UNORDERED_SET_H

#cmakedefine HAVE_UNORDERED_SET 1

#ifdef HAVE_UNORDERED_SET

// Using unordered_set

#include <unordered_set>

#ifndef SHEAF_BEGIN_UNORDERED_NAMESPACE
namespace unordered = std;
#define SHEAF_BEGIN_UNORDERED_NAMESPACE namespace std {
#define SHEAF_END_UNORDERED_NAMESPACE }
#endif

#else

// Using tr1/unordered_set

#include <tr1/unordered_set>

#ifndef SHEAF_BEGIN_UNORDERED_NAMESPACE
namespace unordered = std::tr1;
#define SHEAF_BEGIN_UNORDERED_NAMESPACE namespace std { namespace tr1 {
#define SHEAF_END_UNORDERED_NAMESPACE }}
#endif

#endif // HAVE_UNORDERED_SET



//////////////////////////////////////////////////////////

// If hash_cstr has not been defined by std_unordered_map,
// define it.

#ifndef HAVE_HASH_CSTR
#define HAVE_HASH_CSTR 1

#ifndef STD_CSTRING_H
#include "std_cstring.h"
#endif

SHEAF_BEGIN_UNORDERED_NAMESPACE

  struct key_test
  {
    public:
        bool operator()(const char* s1, const char* s2) const
          {
    	return strcmp(s1, s2) == 0;
          }
  };
    
  struct hash_cstr
  {
      size_t operator()(const char* __s) const
      { 
        unsigned long __h = 0;
        for ( ; *__s; ++__s)
          __h = 5*__h + *__s;
        return size_t(__h);
      }
  };

SHEAF_END_UNORDERED_NAMESPACE

#endif // HAVE_HASH_CSTR

#endif // STD_UNORDERED_SET_H
